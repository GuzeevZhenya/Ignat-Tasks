{"version":3,"sources":["p1-main/m1-ui/u1-app/App.module.css","p2-homeworks/h2/Affair.tsx","p2-homeworks/h2/Affairs.tsx","p2-homeworks/h2/HW2.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Affair","props","console","log","affair","name","onClick","deleteAffairCallback","_id","Affairs","mappedAffairs","data","map","a","key","setFilter","defaultAffairs","priority","HW2","useState","affairs","setAffairs","filter","filteredAffairs","item","filterAffairs","deleteAffair","App","className","s","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,IAAM,mB,8JCqBTC,MAbf,SAAgBC,GAKd,OADAC,QAAQC,IAAIF,GAEV,6BACE,8BAAOA,EAAMG,OAAOC,MACpB,4BAAQC,QAPW,WACrBL,EAAMM,qBAAqBN,EAAMG,OAAOI,OAMN,OC4BvBC,MAlCf,SAAiBR,GACf,IAAMS,EAAgBT,EAAMU,KAAKC,KAAI,SAACC,GAAa,OACjD,kBAAC,EAAO,CACNC,IAAKD,EAAEL,IACPJ,OAAQS,EACRN,qBAAsBN,EAAMM,0BAiBhC,OACE,6BACGG,EAED,4BAAQJ,QAjBG,WACb,OAAOL,EAAMc,UAAU,SAgBG,OACxB,4BAAQT,QAfI,WACd,OAAOL,EAAMc,UAAU,UAcI,QACzB,4BAAQT,QAbM,WAChB,OAAOL,EAAMc,UAAU,YAYM,UAC3B,4BAAQT,QAXG,WACb,OAAOL,EAAMc,UAAU,SAUG,SC3BxBC,EAAoC,CAExC,CAAER,IAAK,EAAGH,KAAM,QAASY,SAAU,QACnC,CAAET,IAAK,EAAGH,KAAM,QAASY,SAAU,OACnC,CAAET,IAAK,EAAGH,KAAM,QAASY,SAAU,OACnC,CAAET,IAAK,EAAGH,KAAM,OAAQY,SAAU,QAClC,CAAET,IAAK,EAAGH,KAAM,aAAcY,SAAU,WAgD3BC,MAzBf,WACE,MAA8BC,mBAA4BH,GAAe,mBAAlEI,EAAO,KAAEC,EAAU,KAC1B,EAA4BF,mBAAqB,OAAM,mBAAhDG,EAAM,KAAEP,EAAS,KAElBQ,EAvBqB,SAC3BH,EACAE,GAGA,MAAe,QAAXA,EACKF,EAAQE,QAAO,SAACE,GAAI,MAAuB,QAAlBA,EAAKP,YACjB,WAAXK,EACFF,EAAQE,QAAO,SAACE,GAAI,MAAuB,WAAlBA,EAAKP,YACjB,SAAXK,EACFF,EAAQE,QAAO,SAACE,GAAI,MAAuB,SAAlBA,EAAKP,YAE9BG,EAWeK,CAAcL,EAASE,GAI/C,OACE,6BACE,6BAAM,cAEN,kBAAC,EAAO,CACNX,KAAMY,EACNR,UAAWA,EACXR,qBAVuB,SAACC,GAAW,OACvCa,EAVwB,SAACD,EAA4BZ,GACvD,OAAOY,EAAQE,QAAO,SAACE,GAAI,OAAKA,EAAKhB,MAAQA,KAShCkB,CAAaN,EAASZ,OAW/B,6BAGA,+BC5CSmB,MAbf,WACE,OACE,yBAAKC,UAAWC,IAAEF,KAChB,iDAEA,kBAAC,EAAG,QCEUG,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZRC,IAASC,OACL,kBAAC,IAAMC,WAAU,KACb,kBAAC,EAAG,OAERC,SAASC,eAAe,SDiIpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACH7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.a83ac53d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3wUQL\"};","import React from \"react\";\r\nimport { AffairType } from \"./HW2\";\r\n\r\ntype AffairPropsType = {\r\n  // key не нужно типизировать\r\n  affair: AffairType; // need to fix any\r\n  deleteAffairCallback: (_id: number) => void; // need to fix any\r\n};\r\n\r\nfunction Affair(props: AffairPropsType) {\r\n  const deleteCallback = () => {\r\n    props.deleteAffairCallback(props.affair._id);\r\n  }; // need to fix\r\n  console.log(props);\r\n  return (\r\n    <div>\r\n      <span>{props.affair.name}</span>\r\n      <button onClick={deleteCallback}>X</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Affair;\r\n","import React from \"react\";\r\nimport Affair from \"./Affair\";\r\nimport { AffairType, FilterType } from \"./HW2\";\r\n\r\ntype AffairsPropsType = {\r\n  // need to fix any\r\n  data: Array<AffairType>;\r\n  setFilter: (filter: FilterType) => void;\r\n  deleteAffairCallback: (_id: number) => void;\r\n};\r\n\r\nfunction Affairs(props: AffairsPropsType) {\r\n  const mappedAffairs = props.data.map((a: AffairType) => (\r\n    <Affair // should work\r\n      key={a._id} // кеи ОБЯЗАТЕЛЬНЫ в 99% - так что лучше их писать всегда при создании компонент в мапе\r\n      affair={a}\r\n      deleteAffairCallback={props.deleteAffairCallback}\r\n    />\r\n  ));\r\n\r\n  const setAll = () => {\r\n    return props.setFilter(\"all\");\r\n  }; // need to fix\r\n  const setHigh = () => {\r\n    return props.setFilter(\"high\");\r\n  };\r\n  const setMiddle = () => {\r\n    return props.setFilter(\"middle\");\r\n  };\r\n  const setLow = () => {\r\n    return props.setFilter(\"low\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {mappedAffairs}\r\n\r\n      <button onClick={setAll}>All</button>\r\n      <button onClick={setHigh}>High</button>\r\n      <button onClick={setMiddle}>Middle</button>\r\n      <button onClick={setLow}>Low</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Affairs;\r\n","import React, { useState } from \"react\";\r\nimport Affairs from \"./Affairs\";\r\n\r\n// types\r\nexport type AffairPriorityType = \"low\" | \"middle\" | \"high\"; // need to fix any\r\nexport type AffairType = {\r\n  _id: number;\r\n  name: string;\r\n  priority: string;\r\n}; // need to fix any\r\nexport type FilterType = \"all\" | AffairPriorityType;\r\n\r\n// constants\r\nconst defaultAffairs: Array<AffairType> = [\r\n  // need to fix any\r\n  { _id: 1, name: \"React\", priority: \"high\" },\r\n  { _id: 2, name: \"anime\", priority: \"low\" },\r\n  { _id: 3, name: \"games\", priority: \"low\" },\r\n  { _id: 4, name: \"work\", priority: \"high\" },\r\n  { _id: 5, name: \"html & css\", priority: \"middle\" },\r\n];\r\n\r\n// pure helper functions\r\nexport const filterAffairs = (\r\n  affairs: Array<AffairType>,\r\n  filter: FilterType\r\n): Array<AffairType> => {\r\n  // need to fix any\r\n  if (filter === \"low\") {\r\n    return affairs.filter((item) => item.priority === \"low\");\r\n  } else if (filter === \"middle\") {\r\n    return affairs.filter((item) => item.priority === \"middle\");\r\n  } else if (filter === \"high\") {\r\n    return affairs.filter((item) => item.priority === \"high\");\r\n  } else {\r\n    return affairs;\r\n  } // need to fix\r\n};\r\nexport const deleteAffair = (affairs: Array<AffairType>, _id: number): any => {\r\n  return affairs.filter((item) => item._id !== _id);\r\n};\r\n\r\nfunction HW2() {\r\n  const [affairs, setAffairs] = useState<Array<AffairType>>(defaultAffairs); // need to fix any\r\n  const [filter, setFilter] = useState<FilterType>(\"all\");\r\n\r\n  const filteredAffairs = filterAffairs(affairs, filter);\r\n  const deleteAffairCallback = (_id: number) =>\r\n    setAffairs(deleteAffair(affairs, _id)); // need to fix any\r\n\r\n  return (\r\n    <div>\r\n      <hr />\r\n      homeworks 2{/*should work (должно работать)*/}\r\n      <Affairs\r\n        data={filteredAffairs}\r\n        setFilter={setFilter}\r\n        deleteAffairCallback={deleteAffairCallback}\r\n      />\r\n      <hr />\r\n      {/*для личного творчества, могу проверить*/}\r\n      {/*<AlternativeAffairs/>*/}\r\n      <hr />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HW2;\r\n","import React from 'react';\r\nimport s from './App.module.css';\r\n// import HW1 from '../../../p2-homeworks/h1/HW1';\r\nimport HW2 from '../../../p2-homeworks/h2/HW2';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className={s.App}>\r\n      <div>react homeworks:</div>\r\n      {/* <HW1 /> */}\r\n      <HW2/>\r\n      {/*<HW3/>*/}\r\n      {/*<HW4/>*/}\r\n      {/*<HW5/>*/}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        )\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config)\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    )\r\n                })\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing\r\n                if (installingWorker == null) {\r\n                    return\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            )\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration)\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.')\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error)\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type')\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload()\r\n                    })\r\n                })\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            )\r\n        })\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister()\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message)\r\n            })\r\n    }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './p1-main/m1-ui/u1-app/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}