{"version":3,"sources":["p2-homeworks/h1/Message.module.css","p2-homeworks/h1/AlternativeMessage.module.css","p1-main/m1-ui/u1-app/App.module.css","p2-homeworks/h1/Message.tsx","p2-homeworks/h1/AlternativeMessage.tsx","p2-homeworks/h1/HW1.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Message","props","className","message","src","avatar","alt","name","time","AlternativeMessage","alternative","messageData","alternativeMessage","HW1","App","s","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,cAAgB,+BAA+B,cAAgB,+BAA+B,mBAAqB,sC,gBCAzMD,EAAOC,QAAU,CAAC,QAAU,oCAAoC,OAAS,mCAAmC,cAAgB,0CAA0C,cAAgB,0CAA0C,mBAAqB,iD,kBCArPD,EAAOC,QAAU,CAAC,IAAM,mB,uKCsBTC,MAbf,SAAiBC,GACf,OACE,yBAAKC,UAAWC,IAAQA,SACtB,yBAAKC,IAAKH,EAAMI,OAAQH,UAAWC,IAAQE,OAAQC,IAAK,WACxD,yBAAKJ,UAAWC,IAA4B,oBAC1C,uBAAGD,UAAWC,IAAuB,eAAIF,EAAMM,MAC/C,uBAAGL,UAAWC,IAAuB,eAAIF,EAAME,SAC/C,uBAAGD,UAAWC,IAAuB,eAAIF,EAAMO,S,gBCOxCC,MAbf,SAA4BR,GAC1B,OACE,yBAAKC,UAAWQ,IAAYP,SAC1B,yBAAKC,IAAKH,EAAMI,OAAQH,UAAWQ,IAAYL,OAAQC,IAAK,WAC5D,yBAAKJ,UAAWQ,IAAgC,oBAC9C,uBAAGR,UAAWQ,IAA2B,eAAIT,EAAMM,MACnD,uBAAGL,UAAWQ,IAA2B,eAAIT,EAAME,SACnD,uBAAGD,UAAWQ,IAA2B,eAAIT,EAAMO,SCdrDG,EAEF,qFAFEA,EAGE,QAHFA,EAIK,QAJLA,EAKE,QAEFC,EACI,2DADJA,EAEE,QAFFA,EAGK,KAHLA,EAIE,QA0BOC,MAvBf,WACE,OACE,6BACE,6BAAM,cAEN,kBAAC,EAAO,CACNR,OAAQM,EACRJ,KAAMI,EACNR,QAASQ,EACTH,KAAMG,IAER,6BACA,kBAAC,EAAkB,CACjBN,OAAQO,EACRL,KAAMK,EACNT,QAASS,EACTJ,KAAMI,IAER,+BCnBSE,MAbf,WACE,OACE,yBAAKZ,UAAWa,IAAED,KAChB,iDACA,kBAAC,EAAG,QCIUE,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZRC,IAASC,OACL,kBAAC,IAAMC,WAAU,KACb,kBAAC,EAAG,OAERC,SAASC,eAAe,SDiIpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAM9B,c","file":"static/js/main.c7a75c92.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__37tR8\",\"avatar\":\"Message_avatar__jrNv-\",\"message__time\":\"Message_message__time__E2hR4\",\"message__name\":\"Message_message__name__2jKa2\",\"message__container\":\"Message_message__container__1NIxX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"AlternativeMessage_message__eL7OD\",\"avatar\":\"AlternativeMessage_avatar__TWE0y\",\"message__time\":\"AlternativeMessage_message__time__12HI6\",\"message__name\":\"AlternativeMessage_message__name__2vF5S\",\"message__container\":\"AlternativeMessage_message__container__1MoMK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__RtYCP\"};","import React from 'react';\nimport message from './Message.module.css';\n\nexport type MessagePropsType = {\n  avatar: string;\n  name: string;\n  message: string;\n  time: string;\n};\n\nfunction Message(props: MessagePropsType) {\n  return (\n    <div className={message.message}>\n      <img src={props.avatar} className={message.avatar} alt={'avatar'} />\n      <div className={message['message__container']}>\n        <p className={message['message__name']}>{props.name}</p>\n        <p className={message['message__text']}>{props.message}</p>\n        <p className={message['message__time']}>{props.time}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Message;\n","import React from 'react';\n\nimport alternative from './AlternativeMessage.module.css';\n\nexport type AlternativeMessageType = {\n  avatar: string;\n  name: string;\n  message: string;\n  time: string;\n};\n\nfunction AlternativeMessage(props: AlternativeMessageType) {\n  return (\n    <div className={alternative.message}>\n      <img src={props.avatar} className={alternative.avatar} alt={'avatar'} />\n      <div className={alternative['message__container']}>\n        <p className={alternative['message__name']}>{props.name}</p>\n        <p className={alternative['message__text']}>{props.message}</p>\n        <p className={alternative['message__time']}>{props.time}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default AlternativeMessage;\n","import React from 'react';\nimport Message from './Message';\nimport AlternativeMessage from './AlternativeMessage';\n\nconst messageData = {\n  avatar:\n    'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n  name: 'Artur',\n  message: 'Hello',\n  time: '22:00',\n};\nconst alternativeMessage = {\n  avatar: 'https://klike.net/uploads/posts/2019-03/1551511801_1.jpg',\n  name: 'Vasia',\n  message: 'Hi',\n  time: '22:12',\n};\n\nfunction HW1() {\n  return (\n    <div>\n      <hr />\n      homeworks 1{/*should work (должно работать)*/}\n      <Message\n        avatar={messageData.avatar}\n        name={messageData.name}\n        message={messageData.message}\n        time={messageData.time}\n      />\n      <hr />\n      <AlternativeMessage\n        avatar={alternativeMessage.avatar}\n        name={alternativeMessage.name}\n        message={alternativeMessage.message}\n        time={alternativeMessage.time}\n      />\n      <hr />\n    </div>\n  );\n}\n\nexport default HW1;\n","import React from 'react';\nimport s from './App.module.css';\nimport HW1 from '../../../p2-homeworks/h1/HW1';\n\nfunction App() {\n  return (\n    <div className={s.App}>\n      <div>react homeworks:</div>\n      <HW1 />\n      {/*<HW2/>*/}\n      {/*<HW3/>*/}\n      {/*<HW4/>*/}\n      {/*<HW5/>*/}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        )\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './p1-main/m1-ui/u1-app/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}